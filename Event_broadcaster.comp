DEFINE COMPONENT Event_broadcaster
DEFINITION PARAMETERS()
SETTING PARAMETERS (
string id0 = 0,
string id1 = 0,
string id2 = 0,
string double0 = 0,
string double1 = 0,
string ip = 0,
int port = 9000
)
OUTPUT PARAMETERS ()
DEPENDENCY "-L. -lwrapper"
SHARE
%{
#include "wrapper.h"

  void throw_error(char* named, char* variable){
    printf("Event_broadcaster: %s: Particle variable %s inaccessible, exiting.\n", named, variable);
    exit(-1);
  }
  int particle_getvar_int(_class_particle* p, char* name){
      double bits = particle_getvar(p, name, 0);
      return *(int*)&bits;
  }

%}

DECLARE
%{
// pre-declare the stateful object
bifrost_readout_t* bifrost;

// pre-declare values which are sent to the stateful object
int i0;
int i1;
int i2;
double d0;
double d1;
%}

INITIALIZE
%{
// Include the header file and run any initialization for the real broadcaster
if (ip == 0 || ip[0] == '\0'){
	bifrost = bifrost_readout_create("127.0.0.1", port);
} else {
	bifrost = bifrost_readout_create(ip, port);
}
bifrost_readout_setPulseTime(bifrost, 1, 0, 0, 0);
bifrost_readout_newPacket(bifrost);

// Make sure the provided property names are accessible -- no error checking later
int failure=0;
particle_getvar(_particle, id0, &failure);
if (failure) throw_error(NAME_CURRENT_COMP, id0); 

particle_getvar(_particle, id1, &failure);
if (failure) throw_error(NAME_CURRENT_COMP, id1); 

particle_getvar(_particle, id2, &failure);
if (failure) throw_error(NAME_CURRENT_COMP, id2); 

particle_getvar(_particle, double0, &failure);
if (failure) throw_error(NAME_CURRENT_COMP, double0);

particle_getvar(_particle, double1, &failure);
if (failure) throw_error(NAME_CURRENT_COMP, double1);


%}

TRACE
%{
i0 = particle_getvar_int(_particle, id0);
i1 = particle_getvar_int(_particle, id1);
i2 = particle_getvar_int(_particle, id2);
d0 = particle_getvar(_particle, double0, 0);
d1 = particle_getvar(_particle, double1, 0);

// Send the event to the broadcaster to be accumulated and broadcast

printf("Accumulate (%d %d %d) %7.3f %7.3f %11.9f\n", i0, i1, i2, d0, d1, t);

// actually calculte the correct time ...
bifrost_readout_add(bifrost, (uint8_t)i0, (uint8_t)i1, (uint32_t)1, *(uint32_t*)&t, (uint8_t)i2, *(uint16_t*)&d0, *(uint16_t*)&d1);

%}

FINALLY
%{
// perform any teardown of the stateful broadcaster
bifrost_readout_send(bifrost);
bifrost_readout_destroy(bifrost);
%}

MCDISPLAY
%{
%}

END
